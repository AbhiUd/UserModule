// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SuperAdminLogin {
  id        Int      @id @default(autoincrement())
  fname     String
  lname     String
  password  String
  email     String   @unique
  phonenumber   String
  resources             ResourceList[]
  superadminInvites     SuperadminToAdminInvite[]
  organizations         OrganizationList[]
}

model AdminLogin {
  id                Int      @id @default(autoincrement())
  fname             String
  lname             String   
  password          String
  email             String   @unique
  mobile_number     String
  organizationId    Int
  organization      OrganizationList @relation(fields: [organizationId], references: [id])
  adminInvites          AdminToUserInvite[]
  roleId            Int
  role              Roles @relation(fields : [roleId] , references : [id])
}

model UserLogin {
  id                Int      @id @default(autoincrement())
  fname             String
  lname             String 
  password          String
  email             String   @unique
  mobile_number     String
  organizationId    Int
  organization      OrganizationList @relation(fields: [organizationId], references: [id])
  roleId            Int
  role              Roles @relation(fields : [roleId] , references : [id])
}

model Invite {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  organizationId    Int
  organization      OrganizationList @relation(fields: [organizationId], references: [id])
}

model OrganizationList {
  id              Int           @id @default(autoincrement())
  name            String
  superadminId    Int
  super_admin     SuperAdminLogin     @relation(fields : [superadminId] , references : [id])
  admins          AdminLogin[]
  users           UserLogin[]
  invites         Invite[]
  userGroups      UserGroup[]
  userPolicies    UserPolicy[]
  superAdmin      SuperadminToAdminInvite[]
  admin           AdminToUserInvite[]
}

model UserPolicy {
  id                Int      @id @default(autoincrement())
  policyName        String  
  organizationId    Int
  organization      OrganizationList @relation(fields: [organizationId], references: [id])
}

model UserGroup {
  id                Int      @id @default(autoincrement())
  groupName         String
  organizationId    Int
  organization      OrganizationList @relation(fields: [organizationId], references: [id])
}

model ResourceList {
  id                Int       @id @default(autoincrement())
  name              String    
  superAdminId      Int
  superAdmin        SuperAdminLogin @relation(fields: [superAdminId], references: [id])
}

model SuperadminToAdminInvite {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  superAdminId      Int
  superAdmin        SuperAdminLogin @relation(fields: [superAdminId], references: [id])
  organizationId    Int
  organization      OrganizationList @relation(fields: [organizationId], references: [id])
}

model AdminToUserInvite {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  adminId           Int
  admin             AdminLogin @relation(fields: [adminId], references: [id])     
  organizationId    Int
  organization      OrganizationList @relation(fields: [organizationId], references: [id])
}

model Roles {
  id                Int       @id @default(autoincrement())
  name              String
  users             UserLogin[]
  admins            AdminLogin[]
}

model otp_schema {
  id                Int       @id @default(autoincrement())
  email             String
  otp               String
  createdAt         DateTime  @default(now())
  expiresAt         DateTime
}